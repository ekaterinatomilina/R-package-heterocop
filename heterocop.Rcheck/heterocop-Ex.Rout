
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "heterocop"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "heterocop-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('heterocop')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CopulaSim")
> ### * CopulaSim
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CopulaSim
> ### Title: CopulaSim
> ### Aliases: CopulaSim
> 
> ### ** Examples
> 
> M <- diag_block_matrix(c(3,4,5),c(0.7,0.8,0.2))
> CopulaSim(20,M,c(rep("qnorm(0,1)",6),rep("qexp(0.5)",4),rep("qbinom(4,0.8)",2)),random=TRUE)
[[1]]
           X1          X2          X3          X4          X5          X6
1   1.3926580  0.31368351  0.74124049 -0.96176221 -0.49266349  0.58119016
2  -0.4096298 -0.01860073  0.61917321 -0.47915386 -1.48322949  0.76377059
3  -1.0693646 -0.35319683  0.01484429 -0.93713879  0.03476369  0.09262448
4   0.7161627  0.05634421  1.01634788  0.57132028  0.35829604  0.82634380
5   1.0822565  2.45551482  1.21655076  0.04395555  0.36690062  1.79051463
6  -0.9231594  1.29759295  1.22439894  0.31489766 -0.05439831  1.49234148
7   1.0235768 -0.33258542 -0.55879460  0.13620218  0.41310714 -0.77671254
8   0.8493386  1.42045369  0.73333119 -0.45219143 -1.29496290  1.18049831
9  -0.4870064  0.34425518  0.62695765  0.93059960  0.35582147 -0.16728571
10  0.5628186 -0.38173175 -0.48030253  0.40721386  0.19811620 -0.49433260
11  0.2426905  0.22583140 -0.20503961  0.77785929 -0.06344396  0.09053392
12 -2.0379279 -0.20052528 -0.20873187  0.86416834  1.79859061  0.73889739
13 -0.6323510 -0.37950522  0.34965399  0.48928305  1.06536844  0.03434131
14 -1.5276831  0.97435113  0.90519862 -0.40040781  0.68791339  0.65714132
15 -0.4232331 -0.54732389  0.43678467 -0.51442028 -1.35005050  0.02237452
16  0.4139825 -0.72031966 -0.06411078  1.07309637 -0.12770119 -0.86898123
17  0.2559468 -0.31972027 -0.43920540 -0.73913823 -0.09983508 -0.47679511
18  1.6123953  0.52712300 -0.28795179  0.10654918  0.36224894  0.82963767
19 -1.3467908 -0.36178878 -0.58759558  1.98297297 -0.29002521 -0.25283915
20  1.5892968  0.29930230  0.37487879 -0.42493095 -0.88477393 -0.07329615
           X7           X8        X9        X10 X11 X12
1   1.2469512 1.3524877281 3.9525242 2.63485535   2   4
2   0.7343434 2.4838536405 3.1749354 1.35211901   3   1
3   1.1782113 1.7273339227 1.1846661 2.92808404   4   3
4   3.4387713 1.0786410488 1.6471073 1.22252108   4   4
5   2.5259322 8.1865417616 6.8329859 0.41604762   4   4
6   0.5777138 0.7212871435 4.9969835 0.22103796   1   2
7   3.6110719 2.6226510718 0.7318487 1.44865495   3   2
8   0.1795998 0.1172745628 4.0600420 1.29822199   2   3
9   2.2840468 0.0887986526 1.0637222 0.02709411   3   2
10  1.8324922 0.6567224290 1.2444636 1.61218362   4   3
11  4.0424121 4.1246082977 1.0258213 2.26451877   2   3
12 10.0171654 0.5200469830 0.6984993 2.77885264   2   3
13  0.5530727 7.6455457602 1.2732644 3.21160252   4   3
14  4.9371460 0.3574408377 2.9220304 0.60406371   2   1
15  1.0272758 0.0036620543 1.3236343 0.15756289   3   3
16  1.7482337 1.0333080164 0.2571375 2.77203819   4   4
17  1.0136634 0.0006341457 1.1335760 0.85772300   4   1
18  2.6000071 1.9270937124 2.3124171 2.29792599   3   4
19  5.0715145 0.7800417605 1.3001255 0.70750603   3   1
20  1.0985911 2.7433573599 0.3673319 1.11908506   4   3

[[2]]
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
 [1,]  1.0  0.0  0.0  0.0  0.8  0.0  0.8  0.0  0.8   0.0   0.0   0.0
 [2,]  0.0  1.0  0.7  0.0  0.0  0.7  0.0  0.0  0.0   0.0   0.0   0.0
 [3,]  0.0  0.7  1.0  0.0  0.0  0.7  0.0  0.0  0.0   0.0   0.0   0.0
 [4,]  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.2  0.0   0.2   0.2   0.2
 [5,]  0.8  0.0  0.0  0.0  1.0  0.0  0.8  0.0  0.8   0.0   0.0   0.0
 [6,]  0.0  0.7  0.7  0.0  0.0  1.0  0.0  0.0  0.0   0.0   0.0   0.0
 [7,]  0.8  0.0  0.0  0.0  0.8  0.0  1.0  0.0  0.8   0.0   0.0   0.0
 [8,]  0.0  0.0  0.0  0.2  0.0  0.0  0.0  1.0  0.0   0.2   0.2   0.2
 [9,]  0.8  0.0  0.0  0.0  0.8  0.0  0.8  0.0  1.0   0.0   0.0   0.0
[10,]  0.0  0.0  0.0  0.2  0.0  0.0  0.0  0.2  0.0   1.0   0.2   0.2
[11,]  0.0  0.0  0.0  0.2  0.0  0.0  0.0  0.2  0.0   0.2   1.0   0.2
[12,]  0.0  0.0  0.0  0.2  0.0  0.0  0.0  0.2  0.0   0.2   0.2   1.0

[[3]]
 [1]  9  4  7  1  2  5  3  8  6 11 12 10

> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CopulaSim", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cor_network_graph")
> ### * cor_network_graph
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cor_network_graph
> ### Title: cor_network_graph
> ### Aliases: cor_network_graph
> 
> ### ** Examples
> 
> R <- diag_block_matrix(c(3,4,5),c(0.7,0.8,0.2))
> data <- CopulaSim(20,R,c(rep("qnorm(0,1)",6),rep("qexp(0.5)",4),
+ rep("qbinom(4,0.8)",2)),random=FALSE)[[1]]
> cor_network_graph(R,TS=0.3,binary=TRUE,legend=c(rep("Normal",6),
+ rep("Exponential",4),rep("Binomial",2)))
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cor_network_graph", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("diag_block_matrix")
> ### * diag_block_matrix
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: diag_block_matrix
> ### Title: diag_block_matrix
> ### Aliases: diag_block_matrix
> 
> ### ** Examples
> 
> diag_block_matrix(c(3,4,5),c(0.3,0.4,0.8))
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
 [1,]  1.0  0.3  0.3  0.0  0.0  0.0  0.0  0.0  0.0   0.0   0.0   0.0
 [2,]  0.3  1.0  0.3  0.0  0.0  0.0  0.0  0.0  0.0   0.0   0.0   0.0
 [3,]  0.3  0.3  1.0  0.0  0.0  0.0  0.0  0.0  0.0   0.0   0.0   0.0
 [4,]  0.0  0.0  0.0  1.0  0.4  0.4  0.4  0.0  0.0   0.0   0.0   0.0
 [5,]  0.0  0.0  0.0  0.4  1.0  0.4  0.4  0.0  0.0   0.0   0.0   0.0
 [6,]  0.0  0.0  0.0  0.4  0.4  1.0  0.4  0.0  0.0   0.0   0.0   0.0
 [7,]  0.0  0.0  0.0  0.4  0.4  0.4  1.0  0.0  0.0   0.0   0.0   0.0
 [8,]  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.8   0.8   0.8   0.8
 [9,]  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.8  1.0   0.8   0.8   0.8
[10,]  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.8  0.8   1.0   0.8   0.8
[11,]  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.8  0.8   0.8   1.0   0.8
[12,]  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.8  0.8   0.8   0.8   1.0
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("diag_block_matrix", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gauss_gen")
> ### * gauss_gen
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gauss_gen
> ### Title: gauss_gen
> ### Aliases: gauss_gen
> 
> ### ** Examples
> 
> M <- diag_block_matrix(c(3,4,5),c(0.7,0.8,0.2))
> gauss_gen(M,20)
           X1         X2         X3          X4         X5         X6
1  0.70534388 0.42706330 0.55440144 0.634580376 0.67929494 0.88215459
2  0.06742264 0.01142924 0.01494267 0.471161457 0.79797184 0.63386195
3  0.53420934 0.49321093 0.41315124 0.356902804 0.35994261 0.12996311
4  0.41217918 0.39018362 0.63368487 0.702337244 0.63789655 0.72729544
5  0.84752652 0.46683932 0.92242808 0.483400338 0.65554715 0.62394884
6  0.62247372 0.24391372 0.60891501 0.004535016 0.00346886 0.01509828
7  0.11915527 0.28979879 0.21968597 0.096373850 0.41024188 0.37659133
8  0.84138697 0.39018775 0.56830277 0.218108251 0.15924999 0.53579726
9  0.22798377 0.28710898 0.40870444 0.890261975 0.65190900 0.93548247
10 0.90307381 0.95450845 0.93627696 0.302395594 0.39616426 0.42495007
11 0.82108034 0.89256740 0.92562536 0.611550645 0.75873539 0.66372944
12 0.01618220 0.10200743 0.25328049 0.394041180 0.27369934 0.11900768
13 0.21092400 0.25691448 0.28823367 0.861339114 0.95218563 0.64393632
14 0.26357229 0.17597434 0.45864558 0.086841591 0.11700471 0.10908354
15 0.69004024 0.56961471 0.45443105 0.575656836 0.20112047 0.73194361
16 0.71145689 0.89172621 0.80140835 0.907865921 0.90588614 0.87220374
17 0.79766931 0.81575496 0.68987448 0.557149269 0.56314478 0.88190625
18 0.98440970 0.98027250 0.99357246 0.991194748 0.98025925 0.99633126
19 0.04916537 0.17589421 0.21804796 0.429254300 0.57271920 0.47319233
20 0.67077573 0.60290191 0.50129760 0.341191272 0.53501771 0.59579088
           X7         X8         X9        X10        X11        X12
1  0.62349903 0.56562974 0.96680954 0.48862505 0.78804379 0.39536960
2  0.88236144 0.46158500 0.30288345 0.16895330 0.06705451 0.37986969
3  0.33218894 0.94904026 0.23839453 0.56914012 0.27399411 0.48796835
4  0.48621498 0.30687421 0.53485933 0.20387697 0.19075565 0.11902613
5  0.39732563 0.83993606 0.35579531 0.21310925 0.58563533 0.10759049
6  0.08379271 0.04888914 0.20695117 0.74731334 0.38819929 0.50857865
7  0.34149533 0.75198492 0.83952733 0.84583289 0.69626228 0.71063128
8  0.30710495 0.18938250 0.15912155 0.23560385 0.32743637 0.44293503
9  0.94196897 0.62258037 0.56296811 0.93541429 0.78470515 0.81527762
10 0.32752824 0.66767550 0.49188956 0.30458352 0.93029615 0.70100722
11 0.67638460 0.56112944 0.48968751 0.58224066 0.38207098 0.72846413
12 0.53600146 0.50610826 0.06524738 0.66976167 0.65120680 0.40103563
13 0.83977383 0.17035374 0.12858760 0.35602314 0.17707304 0.00198868
14 0.53746550 0.77903541 0.99394593 0.49785228 0.72912652 0.60664066
15 0.71248139 0.04878548 0.08341517 0.05221324 0.14431893 0.11509840
16 0.77650973 0.93068326 0.18159168 0.21720304 0.45973704 0.36369966
17 0.88710809 0.92572381 0.50815628 0.39091669 0.97283122 0.69565116
18 0.90550375 0.22993856 0.49002989 0.33385158 0.23381950 0.46751143
19 0.88508524 0.21296147 0.28508276 0.85877375 0.18442686 0.22997409
20 0.25837740 0.96088620 0.05139161 0.91610588 0.63133321 0.86718703
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gauss_gen", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("matrix_cor_ts")
> ### * matrix_cor_ts
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: matrix_cor_ts
> ### Title: matrix_cor_ts
> ### Aliases: matrix_cor_ts
> 
> ### ** Examples
> 
> M <- diag_block_matrix(c(3,4,5),c(0.7,0.8,0.2))
> matrix_cor_ts(M,0.5)
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
 [1,]    1    1    1    0    0    0    0    0    0     0     0     0
 [2,]    1    1    1    0    0    0    0    0    0     0     0     0
 [3,]    1    1    1    0    0    0    0    0    0     0     0     0
 [4,]    0    0    0    1    1    1    1    0    0     0     0     0
 [5,]    0    0    0    1    1    1    1    0    0     0     0     0
 [6,]    0    0    0    1    1    1    1    0    0     0     0     0
 [7,]    0    0    0    1    1    1    1    0    0     0     0     0
 [8,]    0    0    0    0    0    0    0    1    0     0     0     0
 [9,]    0    0    0    0    0    0    0    0    1     0     0     0
[10,]    0    0    0    0    0    0    0    0    0     1     0     0
[11,]    0    0    0    0    0    0    0    0    0     0     1     0
[12,]    0    0    0    0    0    0    0    0    0     0     0     1
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("matrix_cor_ts", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("matrix_gen")
> ### * matrix_gen
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: matrix_gen
> ### Title: matrix_gen
> ### Aliases: matrix_gen
> 
> ### ** Examples
> 
> matrix_gen(15,0.81)
[[1]]
       [,1]  [,2]  [,3] [,4]  [,5]  [,6]  [,7]  [,8]  [,9] [,10] [,11] [,12]
 [1,] 1.000 0.000 0.000    0 0.683 0.362 0.568 0.000 0.000 0.000 0.000 0.000
 [2,] 0.000 1.000 0.000    0 0.000 0.000 0.000 0.000 0.000 0.000 0.477 0.000
 [3,] 0.000 0.000 1.000    0 0.000 0.442 0.000 0.000 0.494 0.000 0.000 0.000
 [4,] 0.000 0.000 0.000    1 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 [5,] 0.683 0.000 0.000    0 1.000 0.247 0.791 0.000 0.000 0.000 0.000 0.254
 [6,] 0.362 0.000 0.442    0 0.247 1.000 0.206 0.000 0.218 0.000 0.000 0.264
 [7,] 0.568 0.000 0.000    0 0.791 0.206 1.000 0.000 0.251 0.406 0.000 0.192
 [8,] 0.000 0.000 0.000    0 0.000 0.000 0.000 1.000 0.000 0.000 0.613 0.000
 [9,] 0.000 0.000 0.494    0 0.000 0.218 0.251 0.000 1.000 0.273 0.000 0.000
[10,] 0.000 0.000 0.000    0 0.000 0.000 0.406 0.000 0.273 1.000 0.000 0.000
[11,] 0.000 0.477 0.000    0 0.000 0.000 0.000 0.613 0.000 0.000 1.000 0.361
[12,] 0.000 0.000 0.000    0 0.254 0.264 0.192 0.000 0.000 0.000 0.361 1.000
[13,] 0.339 0.389 0.000    0 0.231 0.123 0.192 0.000 0.236 0.000 0.186 0.000
[14,] 0.000 0.000 0.352    0 0.000 0.155 0.000 0.000 0.174 0.000 0.000 0.000
[15,] 0.000 0.000 0.000    0 0.000 0.186 0.350 0.000 0.235 0.380 0.000 0.073
      [,13] [,14] [,15]
 [1,] 0.339 0.000 0.000
 [2,] 0.389 0.000 0.000
 [3,] 0.000 0.352 0.000
 [4,] 0.000 0.000 0.000
 [5,] 0.231 0.000 0.000
 [6,] 0.123 0.155 0.186
 [7,] 0.192 0.000 0.350
 [8,] 0.000 0.000 0.000
 [9,] 0.236 0.174 0.235
[10,] 0.000 0.000 0.380
[11,] 0.186 0.000 0.000
[12,] 0.000 0.000 0.073
[13,] 1.000 0.000 0.000
[14,] 0.000 1.000 0.440
[15,] 0.000 0.440 1.000

[[2]]
[1] "sparsity = 0.631111111111111"

> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("matrix_gen", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rho_estim")
> ### * rho_estim
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rho_estim
> ### Title: rho_estim
> ### Aliases: rho_estim
> 
> ### ** Examples
> 
> M <- diag_block_matrix(c(3,4,5),c(0.7,0.8,0.2))
> data <- CopulaSim(20,M,c(rep("qnorm(0,1)",6),rep("qexp(0.5)",4),
+ rep("qbinom(4,0.8)",2)),random=FALSE)[[1]]
> rho_estim(data,c(rep("C",10),rep("D",2)),parallel=FALSE)
             X1           X2         X3          X4         X5          X6
X1   1.00000000  0.894044604  0.9279519  0.30404560  0.2531922  0.48684403
X2   0.89404460  1.000000000  0.8774876  0.47032804  0.3790932  0.56699957
X3   0.92795191  0.877487635  1.0000000  0.35082068  0.2387204  0.40965480
X4   0.30404560  0.470328040  0.3508207  1.00000000  0.8793089  0.91658976
X5   0.25319219  0.379093176  0.2387204  0.87930890  1.0000000  0.79381881
X6   0.48684403  0.566999574  0.4096548  0.91658976  0.7938188  1.00000000
X7  -0.14991468  0.006928914 -0.1609296  0.79436745  0.7049792  0.77240738
X8   0.16680209  0.367136150  0.1960628 -0.06509430  0.1331790 -0.02308077
X9   0.15746597  0.031607623  0.1972871  0.02548653  0.1041776  0.23568464
X10 -0.43554402 -0.219494153 -0.3126349 -0.32685775 -0.2383968 -0.30394782
X11  0.04150176  0.189932130  0.2287962 -0.37090281 -0.3872482 -0.16881416
X12  0.12441229  0.275898473  0.1505776 -0.43770474 -0.3296805 -0.15314281
              X7          X8         X9         X10         X11         X12
X1  -0.149914681  0.16680209 0.15746597 -0.43554402  0.04150176  0.12441229
X2   0.006928914  0.36713615 0.03160762 -0.21949415  0.18993213  0.27589847
X3  -0.160929638  0.19606278 0.19728707 -0.31263489  0.22879619  0.15057760
X4   0.794367454 -0.06509430 0.02548653 -0.32685775 -0.37090281 -0.43770474
X5   0.704979202  0.13317903 0.10417758 -0.23839683 -0.38724817 -0.32968054
X6   0.772407382 -0.02308077 0.23568464 -0.30394782 -0.16881416 -0.15314281
X7   1.000000000 -0.16165816 0.36228245 -0.05405308 -0.21459570 -0.05171774
X8  -0.161658160  1.00000000 0.21842189  0.38984862  0.69338285  0.62654142
X9   0.362282445  0.21842189 1.00000000  0.10081110  0.53457324  0.47035680
X10 -0.054053078  0.38984862 0.10081110  1.00000000  0.72839857  0.67632331
X11 -0.214595696  0.69338285 0.53457324  0.72839857  1.00000000  0.88688989
X12 -0.051717740  0.62654142 0.47035680  0.67632331  0.88688989  1.00000000
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rho_estim", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.834 0.034 0.867 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
